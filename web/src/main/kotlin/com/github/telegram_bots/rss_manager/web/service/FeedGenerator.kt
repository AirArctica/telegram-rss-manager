package com.github.telegram_bots.rss_manager.web.service

import com.fasterxml.jackson.databind.ObjectMapper
import com.github.telegram_bots.rss_manager.web.domain.Post
import com.github.telegram_bots.rss_manager.web.domain.PostType
import com.rometools.rome.feed.synd.*
import com.rometools.rome.io.SyndFeedOutput
import io.reactivex.Single
import mu.KLogging
import org.springframework.stereotype.Service
import java.io.StringWriter
import java.util.*


@Service
class FeedGenerator(
        private val sink: DynamicSink,
        private val jsonMapper: ObjectMapper
) {
    companion object : KLogging()

    fun generate(userId: Long, subscriptionName: String): Single<String> =
            sink.consume("$subscriptionName.$userId")
                .map { (tag, body) -> tag to jsonMapper.readValue(body, Post::class.java) }
                .map { (tag, post) -> tag to generateFeedEntry(post) }
                .reduce(
                        0L to mutableListOf<SyndEntry>(),
                        { (maxTag, entries), (tag, entry) -> Math.max(maxTag, tag) to entries.apply { add(entry) } }
                )
                .map { (maxTag, entries) -> maxTag to generateFeed(subscriptionName, userId, entries.reversed())  }
                .map { (maxTag, feed) ->
                    val w = StringWriter()
                    SyndFeedOutput().output(feed, w)
                    maxTag to w.toString()
                }
                .flatMap { (maxTag, feed) -> Single.just(feed).doOnSuccess { sink.acknowledge(maxTag) } }

    private fun generateFeed(subscriptionName: String, userId: Long, entries: List<SyndEntry>) = SyndFeedImpl().apply {
        title = "$subscriptionName - Telegram RSS Manager"
        feedType = "rss_2.0"
        uri = "https://feed.f0w.org/$userId/$subscriptionName"
        link = "https://feed.f0w.org/$userId/$subscriptionName"
        description = "RSS feed generated by https://t.me/RSSManagerBot"
        publishedDate = Date()
        authors = listOf(
                SyndPersonImpl().apply {
                    name = "cotique"
                    uri = "https://t.me/demidovakatya"
                },
                SyndPersonImpl().apply {
                    name = "boris"
                    uri = "https://t.me/boris_q"
                }
        )
        setEntries(entries)
    }

    private fun generateFeedEntry(post: Post) = SyndEntryImpl().apply {
        title = "${post.id} - ${post.channelName}"
        link = "https://t.me/${post.channelLink}/${post.id}"
        publishedDate = Date(post.date * 1000)
        description = SyndContentImpl().apply {
            type = "text/html"
            value = (if (post.fileURL != null) wrapMedia(post) else "") + post.content
        }
        author = post.author
    }

    private fun wrapMedia(post: Post) = when (post.type) {
        PostType.IMAGE -> """<img src="${post.fileURL}" /><br>"""
        PostType.STICKER -> """<img src="${post.fileURL}" /><br>"""
        PostType.VIDEO -> """<video src="${post.fileURL}" /><br>"""
        else -> "${post.fileURL}<br>"
    }
}