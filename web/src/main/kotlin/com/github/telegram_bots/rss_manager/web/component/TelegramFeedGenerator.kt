package com.github.telegram_bots.rss_manager.web.component

import com.github.telegram_bots.rss_manager.web.domain.Post
import com.github.telegram_bots.rss_manager.web.domain.PostType
import com.rometools.rome.feed.synd.*
import com.rometools.rome.io.SyndFeedOutput
import java.util.*

object TelegramFeedGenerator {
    fun generate(subscriptionName: String, userId: Long, posts: List<Post>) =
            generateFeed(subscriptionName, userId, generateFeedEntries(posts))

    fun SyndFeed.outputAsString(): String = SyndFeedOutput().outputString(this)

    private fun generateFeed(subscriptionName: String, userId: Long, entries: List<SyndEntry>) = SyndFeedImpl().apply {
        title = "$subscriptionName - Telegram RSS Manager"
        feedType = "rss_2.0"
        uri = "https://feed.f0w.org/$userId/$subscriptionName"
        link = "https://feed.f0w.org/$userId/$subscriptionName"
        description = "RSS feed generated by https://t.me/RSSManagerBot"
        publishedDate = Date()
        authors = listOf(
                SyndPersonImpl().apply {
                    name = "cotique"
                    uri = "https://t.me/demidovakatya"
                },
                SyndPersonImpl().apply {
                    name = "boris"
                    uri = "https://t.me/boris_q"
                }
        )
        setEntries(entries)
    }

    private fun generateFeedEntries(posts: List<Post>) = posts
            .sortedWith(compareBy(Post::channelLink, Post::id).reversed())
            .map(TelegramFeedGenerator::generateFeedEntry)

    private fun generateFeedEntry(post: Post) = SyndEntryImpl().apply {
        title = "${post.id} - ${post.channelName}"
        link = "https://t.me/${post.channelLink}/${post.id}"
        publishedDate = Date(post.date * 1000)
        description = SyndContentImpl().apply {
            type = "text/html"
            value = wrapMedia(post) + post.content
        }
        author = post.author
    }

    private fun wrapMedia(post: Post): String {
        if (post.fileURL == null) return ""
        return when (post.type) {
            PostType.IMAGE -> """<img src="${post.fileURL}" /><br>"""
            PostType.STICKER -> """<img src="${post.fileURL}" /><br>"""
            PostType.VIDEO -> """<video src="${post.fileURL}" /><br>"""
            else -> "${post.fileURL}<br>"
        }
    }
}